from Crypto.Util.number import long_to_bytes

# Output from running Lenstra's ECM on N via https://www.alpertron.com.ar/ECM.HTM (running time ~4min)
factorization = '9 282105 380008 121879 × 9 303850 685953 812323 × 9 389357 739583 927789 × 10 336650 220878 499841 × 10 638241 655447 339831 × 11 282698 189561 966721 × 11 328768 673634 243077 × 11 403460 639036 243901 × 11 473665 579512 371723 × 11 492065 299277 279799 × 11 530534 813954 192171 × 11 665347 949879 312361 × 12 132158 321859 677597 × 12 834461 276877 415051 × 12 955403 765595 949597 × 12 973972 336777 979701 × 13 099895 578757 581201 × 13 572286 589428 162097 × 14 100640 260554 622013 × 14 178869 592193 599187 × 14 278240 802299 816541 × 14 523070 016044 624039 × 14 963354 250199 553339 × 15 364597 561881 860737 × 15 669758 663523 555763 × 15 824122 791679 574573 × 15 998365 463074 268941 × 16 656402 470578 844539 × 16 898740 504023 346457 × 17 138336 856793 050757 × 17 174065 872156 629921 × 17 281246 625998 849649'
factorization = map(int, ''.join(factorization.split()).split('×'))

totient = 1
for p in factorization:
  totient *= p - 1

n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
e = 65537
ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464

d = pow(e, -1, totient)
pt = pow(ct, d, n)

print(long_to_bytes(pt).decode())